$date
    Nov  5, 2022  18:24:50
$end
$version
    TOOL:	ncsim	15.20-s084
$end
$timescale
    1 ns
$end

$scope module TestBench $end
$var reg       1 !    Clk  $end
$var reg       1 "    Reset  $end
$var reg       1 #    Start  $end
$var integer  32 $    i  $end
$var integer  32 %    outfile  $end
$var integer  32 &    counter  $end

$scope module CPU $end
$var wire      1 '    clk_i  $end
$var wire      1 (    rst_i  $end
$var wire      1 )    start_i  $end
$var parameter 32 *    IDLE  $end
$var parameter 32 +    START  $end
$var reg       1 ,    state_w  $end
$var reg       1 -    state_r  $end
$var wire     32 .    ALUSrc_Mux_to_ALU [31:0] $end
$var wire     32 /    Read2_to_Mux [31:0] $end
$var wire     32 0    SignExt_to_Mux [31:0] $end
$var wire      3 1    ALUCtrl_to_ALU [2:0] $end
$var wire     32 2    ALU_to_Reg [31:0] $end
$var wire     32 3    Read1_to_ALU [31:0] $end
$var parameter 32 4    instr_size  $end
$var wire      1 5    instr [31] $end
$var wire      1 6    instr [30] $end
$var wire      1 7    instr [29] $end
$var wire      1 8    instr [28] $end
$var wire      1 9    instr [27] $end
$var wire      1 :    instr [26] $end
$var wire      1 ;    instr [25] $end
$var wire      1 <    instr [24] $end
$var wire      1 =    instr [23] $end
$var wire      1 >    instr [22] $end
$var wire      1 ?    instr [21] $end
$var wire      1 @    instr [20] $end
$var wire      1 A    instr [19] $end
$var wire      1 B    instr [18] $end
$var wire      1 C    instr [17] $end
$var wire      1 D    instr [16] $end
$var wire      1 E    instr [15] $end
$var wire      1 F    instr [14] $end
$var wire      1 G    instr [13] $end
$var wire      1 H    instr [12] $end
$var wire      1 I    instr [11] $end
$var wire      1 J    instr [10] $end
$var wire      1 K    instr [9] $end
$var wire      1 L    instr [8] $end
$var wire      1 M    instr [7] $end
$var wire      1 N    instr [6] $end
$var wire      1 O    instr [5] $end
$var wire      1 P    instr [4] $end
$var wire      1 Q    instr [3] $end
$var wire      1 R    instr [2] $end
$var wire      1 S    instr [1] $end
$var wire      1 T    instr [0] $end
$var wire     32 U    pc_o [31:0] $end
$var wire     32 V    pc_i [31:0] $end
$var wire      2 W    ALUOp_to_ALUCtrl [1:0] $end
$var wire      1 X    RegWrite  $end
$var wire      1 Y    ALUSrc  $end

$scope module Control $end
$var wire      7 Z    Op_i [6:0] $end
$var wire      2 W    ALUOp_o [1:0] $end
$var wire      1 Y    ALUSrc_o  $end
$var wire      1 X    RegWrite_o  $end
$var parameter  7 [    R_TYPE  $end
$var parameter  7 \    I_TYPE  $end
$var reg       2 ]    ALUOp [1:0] $end
$var reg       1 ^    ALUSrc  $end
$var reg       1 _    RegWrite  $end
$upscope $end


$scope module Add_PC $end
$var wire     32 U    data1_in [31:0] $end
$var wire     32 `    data2_in [31:0] $end
$var wire     32 V    data_o [31:0] $end
$upscope $end


$scope module PC $end
$var wire      1 '    clk_i  $end
$var wire      1 (    rst_i  $end
$var wire      1 )    start_i  $end
$var wire     32 V    pc_i [31:0] $end
$var reg      32 a    pc_o [31:0] $end
$upscope $end


$scope module Instruction_Memory $end
$var wire     32 U    addr_i [31:0] $end
$var wire      1 5    instr_o [31] $end
$var wire      1 6    instr_o [30] $end
$var wire      1 7    instr_o [29] $end
$var wire      1 8    instr_o [28] $end
$var wire      1 9    instr_o [27] $end
$var wire      1 :    instr_o [26] $end
$var wire      1 ;    instr_o [25] $end
$var wire      1 <    instr_o [24] $end
$var wire      1 =    instr_o [23] $end
$var wire      1 >    instr_o [22] $end
$var wire      1 ?    instr_o [21] $end
$var wire      1 @    instr_o [20] $end
$var wire      1 A    instr_o [19] $end
$var wire      1 B    instr_o [18] $end
$var wire      1 C    instr_o [17] $end
$var wire      1 D    instr_o [16] $end
$var wire      1 E    instr_o [15] $end
$var wire      1 F    instr_o [14] $end
$var wire      1 G    instr_o [13] $end
$var wire      1 H    instr_o [12] $end
$var wire      1 I    instr_o [11] $end
$var wire      1 J    instr_o [10] $end
$var wire      1 K    instr_o [9] $end
$var wire      1 L    instr_o [8] $end
$var wire      1 M    instr_o [7] $end
$var wire      1 N    instr_o [6] $end
$var wire      1 O    instr_o [5] $end
$var wire      1 P    instr_o [4] $end
$var wire      1 Q    instr_o [3] $end
$var wire      1 R    instr_o [2] $end
$var wire      1 S    instr_o [1] $end
$var wire      1 T    instr_o [0] $end
$upscope $end


$scope module Registers $end
$var wire      1 '    clk_i  $end
$var wire      5 b    RS1addr_i [4:0] $end
$var wire      5 c    RS2addr_i [4:0] $end
$var wire      5 d    RDaddr_i [4:0] $end
$var wire     32 2    RDdata_i [31:0] $end
$var wire      1 X    RegWrite_i  $end
$var wire     32 3    RS1data_o [31:0] $end
$var wire     32 /    RS2data_o [31:0] $end
$upscope $end


$scope module MUX_ALUSrc $end
$var wire     32 /    data1_i [31:0] $end
$var wire     32 0    data2_i [31:0] $end
$var wire      1 Y    select_i  $end
$var wire     32 .    data_o [31:0] $end
$upscope $end


$scope module Sign_Extend $end
$var wire      1 5    data_i [11] $end
$var wire      1 6    data_i [10] $end
$var wire      1 7    data_i [9] $end
$var wire      1 8    data_i [8] $end
$var wire      1 9    data_i [7] $end
$var wire      1 :    data_i [6] $end
$var wire      1 ;    data_i [5] $end
$var wire      1 <    data_i [4] $end
$var wire      1 =    data_i [3] $end
$var wire      1 >    data_i [2] $end
$var wire      1 ?    data_i [1] $end
$var wire      1 @    data_i [0] $end
$var wire     32 0    data_o [31:0] $end
$upscope $end


$scope module ALU $end
$var wire     32 3    data1_i [31:0] $end
$var wire     32 .    data2_i [31:0] $end
$var wire      3 1    ALUCtrl_i [2:0] $end
$var wire     32 2    data_o [31:0] $end
$var wire      1 e    Zero_o  $end
$var reg      32 f    data [31:0] $end
$var parameter 32 g    ADD  $end
$var parameter 32 h    XOR  $end
$var parameter 32 i    SLL  $end
$var parameter 32 j    SUB  $end
$var parameter 32 k    MUL  $end
$var parameter 32 l    SRA  $end
$var parameter 32 m    AND  $end
$upscope $end


$scope module ALU_Control $end
$var wire      1 5    funct_i [9] $end
$var wire      1 6    funct_i [8] $end
$var wire      1 7    funct_i [7] $end
$var wire      1 8    funct_i [6] $end
$var wire      1 9    funct_i [5] $end
$var wire      1 :    funct_i [4] $end
$var wire      1 ;    funct_i [3] $end
$var wire      1 F    funct_i [2] $end
$var wire      1 G    funct_i [1] $end
$var wire      1 H    funct_i [0] $end
$var wire      2 W    ALUOp_i [1:0] $end
$var wire      3 1    ALUCtrl_o [2:0] $end
$var parameter 32 n    R_TYPE  $end
$var parameter 32 o    I_TYPE  $end
$var parameter 10 p    AND_FUNC  $end
$var parameter 10 q    XOR_FUNC  $end
$var parameter 10 r    SLL_FUNC  $end
$var parameter 10 s    ADD_FUNC  $end
$var parameter 10 t    SUB_FUNC  $end
$var parameter 10 u    MUL_FUNC  $end
$var parameter  3 v    ADDI_FUNC  $end
$var parameter  3 w    SRAI_FUNC  $end
$var parameter 32 x    ADD  $end
$var parameter 32 y    XOR  $end
$var parameter 32 z    SLL  $end
$var parameter 32 {    SUB  $end
$var parameter 32 |    MUL  $end
$var parameter 32 }    SRA  $end
$var parameter 32 ~    AND  $end
$var reg       1 !!   ALUCtrl  $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b110 ~
b101 }
b100 |
b11 {
b10 z
b1 y
b0 x
b101 w
b0 v
b1000 u
b100000000 t
b0 s
b1 r
b100 q
b111 p
b1 o
b0 n
b110 m
b101 l
b100 k
b11 j
b10 i
b1 h
b0 g
b10011 \
b110011 [
b100 4
b1 +
b0 *
0!
0"
0#
b100000 $
b11 %
b0 &
0'
0(
0)
x,
x-
b0 .
b0 /
b1010 0
b0 1
b0 2
b0 3
05
06
07
08
09
0:
0;
0<
1=
0>
1?
0@
0A
0B
0C
0D
0E
0F
0G
0H
0I
0J
1K
0L
1M
0N
0O
1P
0Q
0R
1S
1T
b0 U
b100 V
b1 W
1X
1Y
b10011 Z
b1 ]
1^
1_
b100 `
b0 a
b0 b
b1010 c
b101 d
1e
b0 f
0!!
$end
#12
1"
1#
1)
1(
0-
1,
#25
1!
b1 &
1'
b100 a
b100 U
b1000 V
1>
0?
1@
1L
0M
b110 d
b1101 c
b1101 0
#50
0!
0'
#75
1!
b10 &
1'
b1000 a
b1000 U
b1100 V
1;
0=
1?
0@
1C
1E
1M
1O
b110011 Z
b111 d
b101 b
b110 c
b100110 0
b0 ]
0^
0Y
b0 W
b100110 .
b100110 f
0e
b100110 2
#100
0!
0'
#125
1!
b11 &
1'
b1100 a
b1100 U
b10000 V
1D
0E
1I
1J
0L
0M
b11100 d
b110 b
#150
0!
0'
#175
1!
b100 &
1'
b10000 a
b10000 U
b10100 V
15
16
17
18
19
1:
1<
1=
1@
0I
0J
1L
0O
b10011 Z
b110 d
b11111 c
b11111111111111111111111111111111 0
b1 ]
1^
b11111111111111111111111111111111 .
1Y
b1 W
b11111111111111111111111111111111 f
b0 .
b11111111111111111111111111111111 2
b0 f
1e
b0 2
#200
0!
0'
#225
1!
b101 &
1'
b10100 a
b10100 U
b11000 V
05
06
07
08
09
0:
0;
0C
0D
1I
1J
b11110 d
b0 b
b11111 0
#250
0!
0'
#275
1!
b110 &
1'
b11000 a
b11000 U
b11100 V
0<
0=
1C
1D
1F
1G
1H
0L
1O
b110011 Z
b11100 d
b110 b
b111 c
b111 0
b0 ]
0^
b100110 /
0Y
b0 W
b111 .
b111 f
0e
b111 2
#300
0!
0'
#325
1!
b111 &
1'
b11100 a
b11100 U
b100000 V
1A
1B
0D
0G
0H
1M
b11101 d
b11100 b
b111 3
b1110 f
1e
b1110 2
#350
0!
0'
#375
1!
b1000 &
1'
b100000 a
b100000 U
b100100 V
1=
0?
0A
0C
1D
0I
1L
0M
b1110 d
b1010 b
b1101 c
b1101 0
b1101 .
b0 /
b0 3
b1101 f
0e
b1101 2
#400
0!
0'
#425
1!
b1001 &
1'
b100100 a
b100100 U
b101000 V
16
0=
1?
1A
1C
0D
0F
0J
0L
1M
b101 d
b11100 b
b111 c
b10000000111 0
b10000000111 .
b100110 /
b111 3
b10000001110 f
b10000001110 2
#450
0!
0'
#475
1!
b1010 &
1'
b101000 a
b101000 U
b101100 V
15
17
18
19
1:
1;
1<
1=
0>
0?
0@
1D
1E
1I
1J
1L
0O
b10011 Z
b11111 d
b11111 b
b11000 c
b11111111111111111111111111111000 0
b1 ]
1^
b11111111111111111111111111111000 .
b0 /
b0 3
1Y
b1 W
b11111111111111111111111111111000 f
b0 .
b11111111111111111111111111111000 2
b0 f
1e
b0 2
#500
0!
0'
#525
1!
b1011 &
1'
b101100 a
b101100 U
b110000 V
#550
0!
0'
#575
1!
b1100 &
1'
b110000 a
b110000 U
b110100 V
#600
0!
0'
#625
1!
b1101 &
1'
b110100 a
b110100 U
b111000 V
05
06
07
08
09
0:
1>
1?
1@
0A
0B
0C
0D
0E
0I
0J
b111 d
b0 b
b11111 c
b111111 0
#650
0!
0'
#675
1!
b1110 &
1'
b111000 a
b111000 U
b111100 V
16
0;
0<
0=
0>
0@
1C
1D
1E
1F
1H
b111 b
b10 c
b10000000010 0
#700
0!
0'
#725
1!
b1111 &
1'
b111100 a
b111100 U
b1000000 V
#750
0!
0'
#775
1!
b10000 &
1'
b1000000 a
b1000000 U
b1000100 V
#800
0!
0'
#825
1!
b10001 &
1'
b1000100 a
b1000100 U
b1001000 V
0?
1@
0E
0M
b110 d
b110 b
b1 c
b10000000001 0
#850
0!
0'
#875
1!
b10010 &
1'
b1001000 a
b1001000 U
b1001100 V
#900
0!
0'
#925
1!
b10011 &
1'
b1001100 a
b1001100 U
b1010000 V
#950
0!
0'
#975
1!
b10100 &
1'
b1010000 a
b1010000 U
b1010100 V
06
1>
1?
0@
1A
1B
1E
0F
1I
1J
1M
1O
b110011 Z
b11111 d
b11111 b
b110 c
b110 0
b0 ]
0^
0Y
b0 W
b110 .
b110 f
0e
b110 2
#1000
0!
0'
#1025
1!
b10101 &
1'
b1010100 a
b110 3
b1010100 U
b1100 f
b1011000 V
1e
b1100 2
#1050
0!
0'
#1075
1!
b10110 &
1'
b1011000 a
b1100 3
b1011000 U
b10010 f
b1011100 V
0>
0?
0A
0B
0C
0D
0E
0H
0I
0J
0K
0L
0M
0O
0P
0S
0T
0e
b10010 2
b0 Z
b0 d
b0 b
b0 c
b0 0
b0 .
b0 3
b0 f
1e
b0 2
#1100
0!
0'
#1125
1!
b10111 &
1'
b1011100 a
b1011100 U
b1100000 V
#1150
0!
0'
#1175
1!
b11000 &
1'
b1100000 a
b1100000 U
b1100100 V
#1200
0!
0'
#1225
1!
b11001 &
1'
b1100100 a
b1100100 U
b1101000 V
#1250
0!
0'
#1275
1!
b11010 &
1'
b1101000 a
b1101000 U
b1101100 V
#1300
0!
0'
#1325
1!
b11011 &
1'
b1101100 a
b1101100 U
b1110000 V
#1350
0!
0'
#1375
1!
b11100 &
1'
b1110000 a
b1110000 U
b1110100 V
#1400
0!
0'
#1425
1!
b11101 &
1'
b1110100 a
b1110100 U
b1111000 V
#1450
0!
0'
#1475
1!
b11110 &
1'
b1111000 a
b1111000 U
b1111100 V
#1500
0!
0'
#1525
1!
