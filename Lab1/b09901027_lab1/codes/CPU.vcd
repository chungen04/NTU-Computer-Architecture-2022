$date
    Dec  6, 2022  10:03:22
$end
$version
    TOOL:	ncsim	15.20-s084
$end
$timescale
    1 ns
$end

$scope module TestBench $end
$var reg       1 !    Clk  $end
$var reg       1 "    Start  $end
$var reg       1 #    Reset  $end
$var integer  32 $    i  $end
$var integer  32 %    outfile  $end
$var integer  32 &    counter  $end
$var integer  32 '    stall  $end
$var integer  32 (    flush  $end
$var parameter 32 )    num_cycles  $end

$scope module CPU $end
$var wire      1 *    clk_i  $end
$var wire      1 +    rst_i  $end
$var wire      1 ,    start_i  $end
$var wire     32 -    IF_pc_o [31:0] $end
$var wire     32 .    IF_pc_i [31:0] $end
$var wire     32 /    IF_instr_mem_o [31:0] $end
$var wire      1 0    ID_RegWrite_toRegIDEX  $end
$var wire      1 1    ID_MemtoReg_toRegIDEX  $end
$var wire      1 2    ID_MemRead_toRegIDEX  $end
$var wire      1 3    ID_MemWrite_toRegIDEX  $end
$var wire      2 4    ID_ALUOp_toRegIDEX [1:0] $end
$var wire      1 5    ID_ALUSrc_toRegIDEX  $end
$var wire     32 6    ID_instr_fromIF [31:0] $end
$var wire     32 7    ID_Rd1_toRegIDEX [31:0] $end
$var wire     32 8    ID_Rd2_toRegIDEX [31:0] $end
$var wire     32 9    ID_ImmGen_toRegIDEX [31:0] $end
$var wire      1 :    EX_RegWrite_toRegEXMEM  $end
$var wire      1 ;    EX_MemtoReg_toRegEXMEM  $end
$var wire      1 <    EX_MemRead_toRegEXMEM  $end
$var wire      1 =    EX_MemWrite_toRegEXMEM  $end
$var wire      2 >    EX_ALUOp [1:0] $end
$var wire      1 ?    EX_ALUSrc  $end
$var wire     32 @    EX_Rd1 [31:0] $end
$var wire     32 A    EX_Rd2 [31:0] $end
$var wire     32 B    EX_Imm [31:0] $end
$var wire     10 C    EX_ALUfunct [9:0] $end
$var wire     32 D    EX_MUXtoALU [31:0] $end
$var wire     32 E    EX_ALU_toRegEXMEM [31:0] $end
$var wire      3 F    EX_ALUCtrl_o [2:0] $end
$var wire      5 G    EX_RegDest [4:0] $end
$var wire      1 H    MEM_RegWrite_toRegMEMWB  $end
$var wire      1 I    MEM_MemtoReg_toRegMEMWB  $end
$var wire      1 J    MEM_MemRead  $end
$var wire      1 K    MEM_MemWrite  $end
$var wire     32 L    MEM_MemAddr_or_ALUResult [31:0] $end
$var wire     32 M    MEM_MemWriteData [31:0] $end
$var wire     32 N    MEM_MemReadData [31:0] $end
$var wire      5 O    MEM_RegDest [4:0] $end
$var wire      1 P    WB_RegWrite  $end
$var wire      1 Q    WB_MemtoReg  $end
$var wire     32 R    WB_ALUResult [31:0] $end
$var wire     32 S    WB_MemReadData [31:0] $end
$var wire     32 T    WB_RegWriteData [31:0] $end
$var wire      5 U    WB_RegDest [4:0] $end
$var wire      5 V    EX_Rs1_to_forwardUnit [4:0] $end
$var wire      5 W    EX_Rs2_to_forwardUnit [4:0] $end
$var wire      2 X    forwardA [1:0] $end
$var wire      2 Y    forwardB [1:0] $end
$var wire     32 Z    EX_MUX_to_Rd1 [31:0] $end
$var wire     32 [    EX_Rd2_MUX_to_MUX [31:0] $end
$var wire      1 \    PCWrite  $end
$var wire      1 ]    stall  $end
$var wire      1 ^    NoOp  $end
$var wire      1 _    Branching  $end
$var wire     32 `    IF_pc_mux_i [31:0] $end
$var wire     32 a    ID_pc [31:0] $end
$var reg       1 b    Flush  $end

$scope module PC_Branching $end
$var wire     32 .    data1_i [31:0] $end
$var wire     32 c    data2_i [31:0] $end
$var wire      1 d    select_i  $end
$var wire     32 `    data_o [31:0] $end
$upscope $end


$scope module Hazard_Detection $end
$var wire      1 <    EX_MemRead_i  $end
$var wire      5 G    EX_RegDest_i [4:0] $end
$var wire      5 e    ID_Rs1_i [4:0] $end
$var wire      5 f    ID_Rs2_i [4:0] $end
$var wire      1 ^    NoOp_o  $end
$var wire      1 ]    Stall_o  $end
$var wire      1 \    PCWrite_o  $end
$var reg       1 g    NoOp  $end
$var reg       1 h    stall  $end
$var reg       1 i    PCWrite  $end
$upscope $end


$scope module forwarding_unit $end
$var wire      5 V    EX_Rs1_i [4:0] $end
$var wire      5 W    EX_Rs2_i [4:0] $end
$var wire      5 U    WB_RegDest_i [4:0] $end
$var wire      1 P    WB_RegWrite_i  $end
$var wire      5 O    MEM_Rd_i [4:0] $end
$var wire      1 H    MEM_RegWrite_i  $end
$var wire      2 X    forwardA_o [1:0] $end
$var wire      2 Y    forwardB_o [1:0] $end
$var reg       2 j    forwardA [1:0] $end
$var reg       2 k    forwardB [1:0] $end
$upscope $end


$scope module EX_Rd1_to_ALU $end
$var wire     32 @    data00_i [31:0] $end
$var wire     32 T    data01_i [31:0] $end
$var wire     32 L    data10_i [31:0] $end
$var wire     32 l    data11_i [31:0] $end
$var wire      2 X    select_i [1:0] $end
$var wire     32 Z    data_o [31:0] $end
$var reg      32 m    data [31:0] $end
$upscope $end


$scope module EX_Rd2_to_ALU $end
$var wire     32 A    data00_i [31:0] $end
$var wire     32 T    data01_i [31:0] $end
$var wire     32 L    data10_i [31:0] $end
$var wire     32 n    data11_i [31:0] $end
$var wire      2 Y    select_i [1:0] $end
$var wire     32 [    data_o [31:0] $end
$var reg      32 o    data [31:0] $end
$upscope $end


$scope module PC_Adder $end
$var wire     32 -    data1_in [31:0] $end
$var wire     32 p    data2_in [31:0] $end
$var wire     32 .    data_o [31:0] $end
$upscope $end


$scope module ALUCtrl $end
$var wire     10 C    funct_i [9:0] $end
$var wire      2 >    ALUOp_i [1:0] $end
$var wire      3 F    ALUCtrl_o [2:0] $end
$var parameter 32 q    R_TYPE  $end
$var parameter 32 r    I_TYPE  $end
$var parameter 10 s    AND_FUNC  $end
$var parameter 10 t    XOR_FUNC  $end
$var parameter 10 u    SLL_FUNC  $end
$var parameter 10 v    ADD_FUNC  $end
$var parameter 10 w    SUB_FUNC  $end
$var parameter 10 x    MUL_FUNC  $end
$var parameter  3 y    ADDI_FUNC  $end
$var parameter  3 z    SRAI_FUNC  $end
$var parameter  3 {    LW_SW_FUNC  $end
$var parameter 32 |    ADD  $end
$var parameter 32 }    XOR  $end
$var parameter 32 ~    SLL  $end
$var parameter 32 !!   SUB  $end
$var parameter 32 "!   MUL  $end
$var parameter 32 #!   SRA  $end
$var parameter 32 $!   AND  $end
$var reg       3 %!   ALUCtrl [2:0] $end
$upscope $end


$scope module ALU $end
$var wire     32 Z    data1_i [31:0] $end
$var wire     32 D    data2_i [31:0] $end
$var wire      3 F    ALUCtrl_i [2:0] $end
$var wire     32 E    data_o [31:0] $end
$var wire      1 &!   Zero_o  $end
$var reg      32 '!   data [31:0] $end
$var parameter 32 (!   ADD  $end
$var parameter 32 )!   XOR  $end
$var parameter 32 *!   SLL  $end
$var parameter 32 +!   SUB  $end
$var parameter 32 ,!   MUL  $end
$var parameter 32 -!   SRA  $end
$var parameter 32 .!   AND  $end
$upscope $end


$scope module Control $end
$var wire      7 /!   Op_i [6:0] $end
$var wire      1 ^    NoOp_i  $end
$var wire      2 4    ALUOp_o [1:0] $end
$var wire      1 5    ALUSrc_o  $end
$var wire      1 0    RegWrite_o  $end
$var wire      1 2    MemRead_o  $end
$var wire      1 3    MemWrite_o  $end
$var wire      1 1    MemtoReg_o  $end
$var wire      1 _    Branch_o  $end
$var parameter  7 0!   R_TYPE  $end
$var parameter  7 1!   I_TYPE  $end
$var parameter  7 2!   LW  $end
$var parameter  7 3!   SW  $end
$var parameter  7 4!   BEQ  $end
$var reg       2 5!   ALUOp [1:0] $end
$var reg       1 6!   ALUSrc  $end
$var reg       1 7!   RegWrite  $end
$var reg       1 8!   MemRead  $end
$var reg       1 9!   MemWrite  $end
$var reg       1 :!   MemtoReg  $end
$var reg       1 ;!   Branching  $end
$upscope $end


$scope module Data_Memory $end
$var wire      1 *    clk_i  $end
$var wire     32 L    addr_i [31:0] $end
$var wire      1 J    MemRead_i  $end
$var wire      1 <!   MemWrite_i  $end
$var wire     32 M    data_i [31:0] $end
$var wire     32 N    data_o [31:0] $end
$upscope $end


$scope module ImmGen $end
$var wire     32 6    data_i [31:0] $end
$var wire     32 9    data_o [31:0] $end
$var reg      32 =!   data [31:0] $end
$upscope $end


$scope module Instruction_Memory $end
$var wire     32 -    addr_i [31:0] $end
$var wire     32 /    instr_o [31:0] $end
$upscope $end


$scope module MUXtoALU $end
$var wire     32 [    data1_i [31:0] $end
$var wire     32 B    data2_i [31:0] $end
$var wire      1 ?    select_i  $end
$var wire     32 D    data_o [31:0] $end
$upscope $end


$scope module MUXtoReg $end
$var wire     32 R    data1_i [31:0] $end
$var wire     32 S    data2_i [31:0] $end
$var wire      1 Q    select_i  $end
$var wire     32 T    data_o [31:0] $end
$upscope $end


$scope module PC $end
$var wire      1 *    clk_i  $end
$var wire      1 +    rst_i  $end
$var wire      1 ,    start_i  $end
$var wire      1 \    PCWrite_i  $end
$var wire     32 `    pc_i [31:0] $end
$var reg      32 >!   pc_o [31:0] $end
$upscope $end


$scope module Registers $end
$var wire      1 *    clk_i  $end
$var wire      5 e    RS1addr_i [4:0] $end
$var wire      5 f    RS2addr_i [4:0] $end
$var wire      5 U    RDaddr_i [4:0] $end
$var wire     32 T    RDdata_i [31:0] $end
$var wire      1 ?!   RegWrite_i  $end
$var wire     32 7    RS1data_o [31:0] $end
$var wire     32 8    RS2data_o [31:0] $end
$upscope $end


$scope module RegIFID $end
$var wire      1 *    clk  $end
$var wire      1 ]    stall  $end
$var wire      1 d    flush  $end
$var wire     32 -    pc_i [31:0] $end
$var wire     32 /    instr_i [31:0] $end
$var wire     32 6    instr_o [31:0] $end
$var wire     32 a    pc_o [31:0] $end
$var reg      32 @!   instr [31:0] $end
$var reg      32 A!   pc [31:0] $end
$upscope $end


$scope module RegIDEX $end
$var wire      1 *    clk  $end
$var wire      1 0    RegWrite_i  $end
$var wire      1 1    MemtoReg_i  $end
$var wire      1 2    MemRead_i  $end
$var wire      1 3    MemWrite_i  $end
$var wire      2 4    ALUOp_i [1:0] $end
$var wire      1 5    ALUSrc_i  $end
$var wire     32 7    Rd1_i [31:0] $end
$var wire     32 8    Rd2_i [31:0] $end
$var wire     32 9    Imm_i [31:0] $end
$var wire     10 B!   ALUCtrl_i [9:0] $end
$var wire      5 C!   RegDest_i [4:0] $end
$var wire      5 e    Rs1_i [4:0] $end
$var wire      5 f    Rs2_i [4:0] $end
$var wire      1 :    RegWrite_o  $end
$var wire      1 ;    MemtoReg_o  $end
$var wire      1 <    MemRead_o  $end
$var wire      1 =    MemWrite_o  $end
$var wire      2 >    ALUOp_o [1:0] $end
$var wire      1 ?    ALUSrc_o  $end
$var wire     32 @    Rd1_o [31:0] $end
$var wire     32 A    Rd2_o [31:0] $end
$var wire     32 B    Imm_o [31:0] $end
$var wire     10 C    ALUCtrl_o [9:0] $end
$var wire      5 G    RegDest_o [4:0] $end
$var wire      5 V    Rs1_o [4:0] $end
$var wire      5 W    Rs2_o [4:0] $end
$var reg       1 D!   RegWrite  $end
$var reg       1 E!   MemtoReg  $end
$var reg       1 F!   MemRead  $end
$var reg       1 G!   MemWrite  $end
$var reg       2 H!   ALUOp [1:0] $end
$var reg       1 I!   ALUSrc  $end
$var reg      32 J!   Rd1 [31:0] $end
$var reg      32 K!   Rd2 [31:0] $end
$var reg      32 L!   Imm [31:0] $end
$var reg      10 M!   ALUCtrl [9:0] $end
$var reg       5 N!   RegDest [4:0] $end
$var reg       5 O!   Rs1 [4:0] $end
$var reg       5 P!   Rs2 [4:0] $end
$upscope $end


$scope module RegEXMEM $end
$var wire      1 *    clk  $end
$var wire      1 :    RegWrite_i  $end
$var wire      1 ;    MemtoReg_i  $end
$var wire      1 <    MemRead_i  $end
$var wire      1 =    MemWrite_i  $end
$var wire     32 E    ALUResult_i [31:0] $end
$var wire     32 [    MemWrData_i [31:0] $end
$var wire      5 G    RegDest_i [4:0] $end
$var wire      1 H    RegWrite_o  $end
$var wire      1 I    MemtoReg_o  $end
$var wire      1 J    MemRead_o  $end
$var wire      1 K    MemWrite_o  $end
$var wire     32 L    ALUResult_o [31:0] $end
$var wire     32 M    MemWrData_o [31:0] $end
$var wire      5 O    RegDest_o [4:0] $end
$var reg       1 Q!   RegWrite  $end
$var reg       1 R!   MemtoReg  $end
$var reg       1 S!   MemRead  $end
$var reg       1 T!   MemWrite  $end
$var reg      32 U!   ALUResult [31:0] $end
$var reg      32 V!   MemWrData [31:0] $end
$var reg       5 W!   RegDest [4:0] $end
$upscope $end


$scope module RegMEMWB $end
$var wire      1 *    clk  $end
$var wire      1 H    RegWrite_i  $end
$var wire      1 I    MemtoReg_i  $end
$var wire     32 L    ALUResult_i [31:0] $end
$var wire     32 N    MemData_i [31:0] $end
$var wire      5 O    RegDest_i [4:0] $end
$var wire      1 P    RegWrite_o  $end
$var wire      1 Q    MemtoReg_o  $end
$var wire     32 R    ALUResult_o [31:0] $end
$var wire     32 S    MemData_o [31:0] $end
$var wire      5 U    RegDest_o [4:0] $end
$var reg       1 X!   RegWrite  $end
$var reg       1 Y!   MemtoReg  $end
$var reg      32 Z!   ALUResult [31:0] $end
$var reg      32 [!   MemData [31:0] $end
$var reg       5 \!   RegDest [4:0] $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b1100011 4!
b100011 3!
b11 2!
b10011 1!
b110011 0!
b110 .!
b101 -!
b100 ,!
b11 +!
b10 *!
b1 )!
b0 (!
b110 $!
b101 #!
b100 "!
b11 !!
b10 ~
b1 }
b0 |
b10 {
b101 z
b0 y
b1000 x
b100000000 w
b0 v
b1 u
b100 t
b111 s
b1 r
b0 q
b1000000 )
1!
0"
1#
b100000 $
b11 %
b0 &
b0 '
b0 (
1*
1+
0,
b0 -
b100 .
b101000000000001000010011 /
00
01
02
03
b0 4
05
b0 6
b0 7
b0 8
b0 9
x:
x;
x<
x=
bx >
x?
bx @
bx A
bx B
bx C
bx D
bx E
b0 F
bx G
0H
0I
0J
0K
bx L
bx M
b0 N
b0 O
0P
0Q
b0 R
bx S
b0 T
bx U
bx V
bx W
b0 X
b0 Y
bx Z
bx [
1\
0]
0^
0_
b100 `
bx a
0b
bx c
0d
b0 e
b0 f
0g
0h
1i
b0 j
b0 k
bz l
bx m
bz n
bx o
b100 p
b0 %!
x&!
bx '!
b0 /!
b0 5!
06!
07!
08!
09!
0:!
0;!
0<!
b0 =!
b0 >!
0?!
b0 @!
bx A!
b0 B!
b0 C!
xD!
xE!
xF!
xG!
bx H!
xI!
bx J!
bx K!
bx L!
bx M!
bx N!
bx O!
bx P!
0Q!
0R!
0S!
0T!
bx U!
bx V!
b0 W!
0X!
0Y!
b0 Z!
bx [!
bx \!
$end
#12
0#
1"
1,
0+
#25
0!
0*
#50
1!
b1 &
1*
b100 >!
bx Z!
b0 [!
b0 \!
xQ!
xR!
xS!
xT!
bx W!
0D!
0E!
0F!
0G!
b0 H!
0I!
b0 J!
b0 K!
b0 L!
b0 M!
b0 N!
b0 O!
b0 P!
b101000000000001000010011 @!
b0 A!
b0 a
b101000000000001000010011 6
b0 W
b0 V
b0 G
b0 C
b0 B
b0 A
b0 @
0?
b0 >
0=
0<
0;
0:
bx O
xK
xJ
xI
xH
b0 U
b0 S
bx R
b100 -
b1010 =!
b0 o
b0 m
b1000 .
b110000000000001010010011 /
bx T
bx N
b0 Z
b0 [
b1010 f
b10011 /!
b100 C!
b1010 9
b0 c
b1 5!
17!
16!
b10100 c
15
10
b1 4
b0 D
b1000 `
b0 '!
1&!
b0 E
#75
0!
0*
#100
1!
b10 &
1*
b1000 >!
xX!
xY!
bx [!
bx \!
0Q!
0R!
0S!
0T!
b0 U!
b0 V!
b0 W!
1D!
b1 H!
1I!
b1010 L!
b100 N!
b1010 P!
b110000000000001010010011 @!
b100 A!
b100 a
b110000000000001010010011 6
b1010 W
b100 G
b1010 B
1?
b1 >
1:
b0 O
b0 M
b0 L
0K
0J
0I
0H
bx U
bx S
xQ
xP
b1000 -
b1100 =!
b1100 .
b11111111001100000000001100010011 /
b0 N
b1010 D
b1100 f
b101 C!
b1100 9
b11000 c
b1010 '!
b11100 c
0&!
b1010 E
b1100 `
#125
0!
0*
#150
1!
b11 &
1*
b1100 >!
0X!
0Y!
b0 Z!
b0 [!
b0 \!
1Q!
b1010 U!
b100 W!
b1100 L!
b101 N!
b1100 P!
b11111111001100000000001100010011 @!
b1000 A!
b1000 a
b11111111001100000000001100010011 6
b1100 W
b101 G
b1100 B
b100 O
b1010 L
1H
b0 U
b0 S
b0 R
0Q
0P
b1100 -
b11111111111111111111111111110011 =!
b10000 .
b1000000000000001110010011 /
b0 T
b1100 D
b10011 f
b1111111000 B!
b110 C!
b11111111111111111111111111110011 9
b100000 c
b1100 '!
b11111111111111111111111111101110 c
b1100 E
b10000 `
#175
0!
0*
#200
1!
b100 &
1*
b10000 >!
1X!
b1010 Z!
b100 \!
b1100 U!
b101 W!
b11111111111111111111111111110011 L!
b1111111000 M!
b110 N!
b10011 P!
b1000000000000001110010011 @!
b1100 A!
b1100 a
b1000000000000001110010011 6
b10011 W
b110 G
b1111111000 C
b11111111111111111111111111110011 B
b101 O
b1100 L
b100 U
b1010 R
1P
b10000 -
b10000 =!
b10100 .
b10010000000011 /
1?!
b1010 T
b11111111111111111111111111110011 D
b10000 f
b0 B!
b111 C!
b10000 9
b11111111111111111111111111110010 c
b11111111111111111111111111110011 '!
b101100 c
b11111111111111111111111111110011 E
b10100 `
#225
0!
0*
#250
1!
b101 &
1*
b10100 >!
b1100 Z!
b101 \!
b11111111111111111111111111110011 U!
b110 W!
b10000 L!
b0 M!
b111 N!
b10000 P!
b10010000000011 @!
b10000 A!
b10000 a
b10010000000011 6
b10000 W
b111 G
b0 C
b10000 B
b110 O
b11111111111111111111111111110011 L
b101 U
b1100 R
b10100 -
b0 =!
b11000 .
b10000000010010010000011 /
b1100 T
b10000 D
b0 f
b11 /!
b10 B!
b1000 C!
b0 9
b110000 c
b10000 '!
18!
1:!
b10000 c
11
12
b10000 E
b11000 `
#275
0!
0*
#300
1!
b110 &
1*
b11000 >!
b11111111111111111111111111110011 Z!
b110 \!
b10000 U!
b111 W!
1E!
1F!
b0 L!
b10 M!
b1000 N!
b0 P!
b10000000010010010000011 @!
b10100 A!
b10100 a
b10000000010010010000011 6
b0 W
b1000 G
b10 C
b0 B
1<
1;
b111 O
b10000 L
b110 U
b11111111111111111111111111110011 R
b11000 -
b100 =!
b11100 .
b100000000010010100000011 /
b11111111111111111111111111110011 T
b0 D
b100 f
b1001 C!
b100 9
b10100 c
b0 '!
b11100 c
1&!
b0 E
b1010 8
b11100 `
#325
0!
0*
#350
1!
b111 &
1*
b11100 >!
b10000 Z!
b111 \!
1R!
1S!
b0 U!
b1000 W!
b1010 K!
b100 L!
b1001 N!
b100 P!
b100000000010010100000011 @!
b11000 A!
b11000 a
b100000000010010100000011 6
b100 W
b1001 G
b100 B
b1010 A
b1000 O
b0 L
1J
1I
b111 U
b10000 R
b11100 -
b1000 =!
b1010 o
b100000 .
b11000101010000000100011 /
b10000 T
b101 N
b1010 [
b100 D
b1000 f
b1010 C!
b1000 9
b100000 c
b100 '!
b101000 c
0&!
b100 E
b0 8
b100000 `
#375
0!
0*
#400
1!
b1000 &
1*
b100000 >!
1Y!
b0 Z!
b101 [!
b1000 \!
b100 U!
b1010 V!
b1001 W!
b0 K!
b1000 L!
b1010 N!
b1000 P!
b11000101010000000100011 @!
b11100 A!
b11100 a
b11000101010000000100011 6
b1000 W
b1010 G
b1000 B
b0 A
b1001 O
b1010 M
b100 L
b1000 U
b101 S
b0 R
1Q
b100000 -
b0 =!
b1 k
b0 o
b100100 .
b11100111000000100000110011 /
b101 T
b10000 8
b110 N
b0 [
b1000 D
b1 Y
b101 e
b110 f
b100011 /!
b0 C!
b0 9
b101100 c
b101 o
b1000 '!
07!
08!
19!
0:!
b11100 c
01
13
02
00
b1000 E
b101 [
b1100 7
b11111111111111111111111111110011 8
b100100 `
#425
0!
0*
#450
1!
b1001 &
1*
b100100 >!
b100 Z!
b110 [!
b1001 \!
b1000 U!
b101 V!
b1010 W!
0D!
0E!
0F!
1G!
b1100 J!
b11111111111111111111111111110011 K!
b0 L!
b0 N!
b101 O!
b110 P!
b11100111000000100000110011 @!
b100000 A!
b100000 a
b11100111000000100000110011 6
b110 W
b101 V
b0 G
b0 B
b11111111111111111111111111110011 A
b1100 @
1=
0<
0;
0:
b1010 O
b101 M
b1000 L
b1001 U
b110 S
b100 R
b100100 -
b0 k
b1100 m
b101000 .
b11101111010000100010110011 /
b110 T
b1010 N
b1100 Z
b0 D
b0 Y
b11000 e
b11001 f
b110011 /!
b1000 B!
b10000 C!
b100000 c
b11111111111111111111111111110011 o
b1100 '!
b0 5!
06!
17!
09!
03
10
05
b0 4
b1100 E
b11111111111111111111111111110011 [
b11111111111111111111111111101000 7
b11111111111111111111111111100111 8
b101000 `
#475
0!
0*
#500
1!
b1010 &
1*
b101000 >!
b1000 Z!
b1010 [!
b1010 \!
0Q!
0R!
0S!
1T!
b1100 U!
b11111111111111111111111111110011 V!
b0 W!
1D!
0G!
b0 H!
0I!
b11111111111111111111111111101000 J!
b11111111111111111111111111100111 K!
b1000 M!
b10000 N!
b11000 O!
b11001 P!
b11101111010000100010110011 @!
b100100 A!
b100100 a
b11101111010000100010110011 6
b11001 W
b11000 V
b10000 G
b1000 C
b11111111111111111111111111100111 A
b11111111111111111111111111101000 @
0?
b0 >
0=
1:
b0 O
b11111111111111111111111111110011 M
b1100 L
1K
0J
0I
0H
b1010 U
b1010 S
b1000 R
b101000 -
b100 %!
b11111111111111111111111111100111 o
b11111111111111111111111111101000 m
b101100 .
b11110111100000100100110011 /
b1010 T
1<!
b0 N
b11111111111111111111111111110011 D
b11111111111111111111111111101000 Z
b11111111111111111111111111100111 [
b100 F
b11010 e
b11011 f
b10001 C!
b100100 c
b100111000 '!
b11111111111111111111111111100111 D
b100111000 E
b11111111111111111111111111100110 7
b11111111111111111111111111100101 8
b101100 `
b1001011000 '!
b1001011000 E
#525
0!
0*
#550
1!
b1011 &
1*
b101100 >!
0X!
0Y!
b1100 Z!
b0 [!
b0 \!
1Q!
0T!
b1001011000 U!
b11111111111111111111111111100111 V!
b10000 W!
b11111111111111111111111111100110 J!
b11111111111111111111111111100101 K!
b10001 N!
b11010 O!
b11011 P!
b11110111100000100100110011 @!
b101000 A!
b101000 a
b11110111100000100100110011 6
b11011 W
b11010 V
b10001 G
b11111111111111111111111111100101 A
b11111111111111111111111111100110 @
b10000 O
b11111111111111111111111111100111 M
b1001011000 L
0K
1H
b0 U
b0 S
b1100 R
0Q
0P
b101100 -
b11111111111111111111111111100101 o
b11111111111111111111111111100110 m
b110000 .
b11111111110000100110110011 /
0?!
b1100 T
0<!
b11111111111111111111111111100110 Z
b11111111111111111111111111100101 [
b11100 e
b11101 f
b10010 C!
b101000 c
b1010001010 '!
b11111111111111111111111111100101 D
b1010001010 E
b111000 7
b111010 8
b110000 `
b1010111110 '!
b1010111110 E
#575
0!
0*
#600
1!
b1100 &
1*
b110000 >!
1X!
b1001011000 Z!
b10000 \!
b1010111110 U!
b11111111111111111111111111100101 V!
b10001 W!
b111000 J!
b111010 K!
b10010 N!
b11100 O!
b11101 P!
b11111111110000100110110011 @!
b101100 A!
b101100 a
b11111111110000100110110011 6
b11101 W
b11100 V
b10010 G
b111010 A
b111000 @
b10001 O
b11111111111111111111111111100101 M
b1010111110 L
b10000 U
b1001011000 R
1P
b110000 -
b111010 o
b111000 m
b110100 .
b1000000111010000000100011 /
1?!
b1001011000 T
b111000 Z
b111010 [
b11110 e
b11111 f
b10011 C!
b101100 c
b11111111111111111111101000011000 '!
b111010 D
b11111111111111111111101000011000 E
b111100 7
b111110 8
b110100 `
b110010110000 '!
b110010110000 E
#625
0!
0*
#650
1!
b1101 &
1*
b110100 >!
b1010111110 Z!
b10001 \!
b110010110000 U!
b111010 V!
b10010 W!
b111100 J!
b111110 K!
b10011 N!
b11110 O!
b11111 P!
b1000000111010000000100011 @!
b110000 A!
b110000 a
b1000000111010000000100011 6
b11111 W
b11110 V
b10011 G
b111110 A
b111100 @
b10010 O
b111010 M
b110010110000 L
b10001 U
b1010111110 R
b110100 -
b111110 o
b111100 m
b111000 .
b1000100000010001000100011 /
b1010111110 T
b111100 Z
b111110 [
b111 e
b10000 f
b100011 /!
b10 B!
b0 C!
b110000 c
b110110011000 '!
b1 5!
07!
16!
19!
13
15
00
b1 4
b111110 D
b110110011000 E
b10000 7
b1001011000 8
b111000 `
b111010001000 '!
b111010001000 E
#675
0!
0*
#700
1!
b1110 &
1*
b111000 >!
b110010110000 Z!
b10010 \!
b111010001000 U!
b111110 V!
b10011 W!
0D!
1G!
b1 H!
1I!
b10000 J!
b1001011000 K!
b10 M!
b0 N!
b111 O!
b10000 P!
b1000100000010001000100011 @!
b110100 A!
b110100 a
b1000100000010001000100011 6
b10000 W
b111 V
b0 G
b10 C
b1001011000 A
b10000 @
1?
b1 >
1=
0:
b10011 O
b111110 M
b111010001000 L
b10010 U
b110010110000 R
b111000 -
b100 =!
b0 %!
b1001011000 o
b10000 m
b111100 .
b0 /
b110010110000 T
b0 D
b10000 Z
b1001011000 [
b0 F
b0 e
b10001 f
b100 C!
b100 9
b110100 c
b10000 '!
b111100 c
b10000 E
b0 7
b1010111110 8
b111100 `
#725
0!
0*
#750
1!
b1111 &
1*
b111100 >!
b111010001000 Z!
b10011 \!
0Q!
1T!
b10000 U!
b1001011000 V!
b0 W!
b0 J!
b1010111110 K!
b100 L!
b100 N!
b0 O!
b10001 P!
b0 @!
b111000 A!
b111000 a
b0 6
b10001 W
b0 V
b100 G
b100 B
b1010111110 A
b0 @
b0 O
b1001011000 M
b10000 L
1K
0H
b10011 U
b111010001000 R
b111100 -
b0 =!
b1010111110 o
b0 m
b1000000 .
b111010001000 T
1<!
b0 Z
b1010111110 [
b100 D
b0 f
b0 /!
b0 B!
b0 C!
b0 9
b1000000 c
b100 '!
b0 5!
06!
09!
b111000 c
03
05
b0 4
b100 E
b0 8
b1000000 `
#775
0!
0*
#800
1!
b10000 &
1*
b1000000 >!
0X!
b10000 Z!
b0 \!
b100 U!
b1010111110 V!
b100 W!
0G!
b0 H!
0I!
b0 K!
b0 L!
b0 M!
b0 N!
b0 P!
b111100 A!
b111100 a
b0 W
b0 G
b0 C
b0 B
b0 A
0?
b0 >
0=
b100 O
b1010111110 M
b100 L
b0 U
b10000 R
0P
b1000000 -
b0 o
b1000100 .
0?!
b10000 T
b111010001000 7
b111010001000 8
b0 [
b1010111110 D
b111100 c
b1010111110 '!
b1010111110 E
b0 D
b0 7
b0 8
b1000100 `
b0 '!
1&!
b0 E
#825
0!
0*
#850
1!
b10001 &
1*
b1000100 >!
b100 Z!
b100 \!
0T!
b0 U!
b0 V!
b0 W!
b1000000 A!
b1000000 a
b0 O
b0 M
b0 L
0K
b100 U
b100 R
b1000100 -
b1001000 .
b100 T
0<!
b1000000 c
b1001000 `
#875
0!
0*
#900
1!
b10010 &
1*
b1001000 >!
b0 Z!
b0 \!
b1000100 A!
b1000100 a
b0 U
b0 R
b1001000 -
b1001100 .
b0 T
b1000100 c
b1001100 `
#925
0!
0*
#950
1!
b10011 &
1*
b1001100 >!
b1001000 A!
b1001000 a
b1001100 -
b1010000 .
b1001000 c
b1010000 `
#975
0!
0*
#1000
1!
b10100 &
1*
b1010000 >!
b1001100 A!
b1001100 a
b1010000 -
b1010100 .
b1001100 c
b1010100 `
#1025
0!
0*
#1050
1!
b10101 &
1*
b1010100 >!
b1010000 A!
b1010000 a
b1010100 -
b1011000 .
b1010000 c
b1011000 `
#1075
0!
0*
#1100
1!
b10110 &
1*
b1011000 >!
b1010100 A!
b1010100 a
b1011000 -
b1011100 .
b1010100 c
b1011100 `
#1125
0!
0*
#1150
1!
b10111 &
1*
b1011100 >!
b1011000 A!
b1011000 a
b1011100 -
b1100000 .
b1011000 c
b1100000 `
#1175
0!
0*
#1200
1!
b11000 &
1*
b1100000 >!
b1011100 A!
b1011100 a
b1100000 -
b1100100 .
b1011100 c
b1100100 `
#1225
0!
0*
#1250
1!
b11001 &
1*
b1100100 >!
b1100000 A!
b1100000 a
b1100100 -
b1101000 .
b1100000 c
b1101000 `
#1275
0!
0*
#1300
1!
b11010 &
1*
b1101000 >!
b1100100 A!
b1100100 a
b1101000 -
b1101100 .
b1100100 c
b1101100 `
#1325
0!
0*
#1350
1!
b11011 &
1*
b1101100 >!
b1101000 A!
b1101000 a
b1101100 -
b1110000 .
b1101000 c
b1110000 `
#1375
0!
0*
#1400
1!
b11100 &
1*
b1110000 >!
b1101100 A!
b1101100 a
b1110000 -
b1110100 .
b1101100 c
b1110100 `
#1425
0!
0*
#1450
1!
b11101 &
1*
b1110100 >!
b1110000 A!
b1110000 a
b1110100 -
b1111000 .
b1110000 c
b1111000 `
#1475
0!
0*
#1500
1!
b11110 &
1*
b1111000 >!
b1110100 A!
b1110100 a
b1111000 -
b1111100 .
b1110100 c
b1111100 `
#1525
0!
0*
#1550
1!
b11111 &
1*
b1111100 >!
b1111000 A!
b1111000 a
b1111100 -
b10000000 .
b1111000 c
b10000000 `
#1575
0!
0*
#1600
1!
b100000 &
1*
b10000000 >!
b1111100 A!
b1111100 a
b10000000 -
b10000100 .
b1111100 c
b10000100 `
#1625
0!
0*
#1650
1!
b100001 &
1*
b10000100 >!
b10000000 A!
b10000000 a
b10000100 -
b10001000 .
b10000000 c
b10001000 `
#1675
0!
0*
#1700
1!
b100010 &
1*
b10001000 >!
b10000100 A!
b10000100 a
b10001000 -
b10001100 .
b10000100 c
b10001100 `
#1725
0!
0*
#1750
1!
b100011 &
1*
b10001100 >!
b10001000 A!
b10001000 a
b10001100 -
b10010000 .
b10001000 c
b10010000 `
#1775
0!
0*
#1800
1!
b100100 &
1*
b10010000 >!
b10001100 A!
b10001100 a
b10010000 -
b10010100 .
b10001100 c
b10010100 `
#1825
0!
0*
#1850
1!
b100101 &
1*
b10010100 >!
b10010000 A!
b10010000 a
b10010100 -
b10011000 .
b10010000 c
b10011000 `
#1875
0!
0*
#1900
1!
b100110 &
1*
b10011000 >!
b10010100 A!
b10010100 a
b10011000 -
b10011100 .
b10010100 c
b10011100 `
#1925
0!
0*
#1950
1!
b100111 &
1*
b10011100 >!
b10011000 A!
b10011000 a
b10011100 -
b10100000 .
b10011000 c
b10100000 `
#1975
0!
0*
#2000
1!
b101000 &
1*
b10100000 >!
b10011100 A!
b10011100 a
b10100000 -
b10100100 .
b10011100 c
b10100100 `
#2025
0!
0*
#2050
1!
b101001 &
1*
b10100100 >!
b10100000 A!
b10100000 a
b10100100 -
b10101000 .
b10100000 c
b10101000 `
#2075
0!
0*
#2100
1!
b101010 &
1*
b10101000 >!
b10100100 A!
b10100100 a
b10101000 -
b10101100 .
b10100100 c
b10101100 `
#2125
0!
0*
#2150
1!
b101011 &
1*
b10101100 >!
b10101000 A!
b10101000 a
b10101100 -
b10110000 .
b10101000 c
b10110000 `
#2175
0!
0*
#2200
1!
b101100 &
1*
b10110000 >!
b10101100 A!
b10101100 a
b10110000 -
b10110100 .
b10101100 c
b10110100 `
#2225
0!
0*
#2250
1!
b101101 &
1*
b10110100 >!
b10110000 A!
b10110000 a
b10110100 -
b10111000 .
b10110000 c
b10111000 `
#2275
0!
0*
#2300
1!
b101110 &
1*
b10111000 >!
b10110100 A!
b10110100 a
b10111000 -
b10111100 .
b10110100 c
b10111100 `
#2325
0!
0*
#2350
1!
b101111 &
1*
b10111100 >!
b10111000 A!
b10111000 a
b10111100 -
b11000000 .
b10111000 c
b11000000 `
#2375
0!
0*
#2400
1!
b110000 &
1*
b11000000 >!
b10111100 A!
b10111100 a
b11000000 -
b11000100 .
b10111100 c
b11000100 `
#2425
0!
0*
#2450
1!
b110001 &
1*
b11000100 >!
b11000000 A!
b11000000 a
b11000100 -
b11001000 .
b11000000 c
b11001000 `
#2475
0!
0*
#2500
1!
b110010 &
1*
b11001000 >!
b11000100 A!
b11000100 a
b11001000 -
b11001100 .
b11000100 c
b11001100 `
#2525
0!
0*
#2550
1!
b110011 &
1*
b11001100 >!
b11001000 A!
b11001000 a
b11001100 -
b11010000 .
b11001000 c
b11010000 `
#2575
0!
0*
#2600
1!
b110100 &
1*
b11010000 >!
b11001100 A!
b11001100 a
b11010000 -
b11010100 .
b11001100 c
b11010100 `
#2625
0!
0*
#2650
1!
b110101 &
1*
b11010100 >!
b11010000 A!
b11010000 a
b11010100 -
b11011000 .
b11010000 c
b11011000 `
#2675
0!
0*
#2700
1!
b110110 &
1*
b11011000 >!
b11010100 A!
b11010100 a
b11011000 -
b11011100 .
b11010100 c
b11011100 `
#2725
0!
0*
#2750
1!
b110111 &
1*
b11011100 >!
b11011000 A!
b11011000 a
b11011100 -
b11100000 .
b11011000 c
b11100000 `
#2775
0!
0*
#2800
1!
b111000 &
1*
b11100000 >!
b11011100 A!
b11011100 a
b11100000 -
b11100100 .
b11011100 c
b11100100 `
#2825
0!
0*
#2850
1!
b111001 &
1*
b11100100 >!
b11100000 A!
b11100000 a
b11100100 -
b11101000 .
b11100000 c
b11101000 `
#2875
0!
0*
#2900
1!
b111010 &
1*
b11101000 >!
b11100100 A!
b11100100 a
b11101000 -
b11101100 .
b11100100 c
b11101100 `
#2925
0!
0*
#2950
1!
b111011 &
1*
b11101100 >!
b11101000 A!
b11101000 a
b11101100 -
b11110000 .
b11101000 c
b11110000 `
#2975
0!
0*
#3000
1!
b111100 &
1*
b11110000 >!
b11101100 A!
b11101100 a
b11110000 -
b11110100 .
b11101100 c
b11110100 `
#3025
0!
0*
#3050
1!
b111101 &
1*
b11110100 >!
b11110000 A!
b11110000 a
b11110100 -
b11111000 .
b11110000 c
b11111000 `
#3075
0!
0*
#3100
1!
b111110 &
1*
b11111000 >!
b11110100 A!
b11110100 a
b11111000 -
b11111100 .
b11110100 c
b11111100 `
#3125
0!
0*
#3150
1!
b111111 &
1*
b11111100 >!
b11111000 A!
b11111000 a
b11111100 -
b100000000 .
b11111000 c
b100000000 `
#3175
0!
0*
#3200
1!
b1000000 &
1*
b100000000 >!
b11111100 A!
b11111100 a
b100000000 -
b100000100 .
b11111100 c
b100000100 `
#3225
0!
0*
#3250
1!
